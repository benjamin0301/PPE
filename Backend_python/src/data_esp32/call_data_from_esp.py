import os
import requests

# üìå Adresse IP de l'ESP32 (modifie si n√©cessaire)
ESP32_IP = "192.168.4.1"
DOWNLOAD_URL = f"http://{ESP32_IP}/download"

# üìå Dossier o√π enregistrer les fichiers t√©l√©charg√©s
LOCAL_SAVE_FOLDER = os.path.join(os.path.dirname(__file__), "../../data/json_data_files/")
os.makedirs(LOCAL_SAVE_FOLDER, exist_ok=True)


def get_file_list():
    """R√©cup√®re la liste des fichiers stock√©s sur l'ESP32"""
    try:
        print(f"üîÑ Envoi de la requ√™te GET √† : {DOWNLOAD_URL}")
        response = requests.get(DOWNLOAD_URL, timeout=2)
        print(f"R√©ponse du serveur (code) : {response.status_code}")

        if response.status_code == 200:
            try:
                json_data = response.json()
                print("Contenu JSON re√ßu :", json_data)
            except Exception as e:
                print("üö® Erreur lors de la conversion de la r√©ponse en JSON :", e)
                return []
            file_list = json_data.get("files", []) if isinstance(json_data, dict) else json_data
            if not isinstance(file_list, list):
                file_list = [file_list]
            return file_list
        else:
            print(f"‚ùå Erreur HTTP {response.status_code} lors de la r√©cup√©ration des fichiers.")
            print("Contenu de la r√©ponse :", response.text)
            return []
    except requests.exceptions.Timeout:
        print("üö® Timeout : Le d√©lai d'attente pour la connexion a expir√©.")
        return []
    except requests.exceptions.ConnectionError:
        print("üö® Erreur de connexion : Impossible de se connecter √† l'ESP32.")
        return []
    except requests.exceptions.RequestException as e:
        print(f"üö® Erreur de requ√™te : {e}")
        return []


def download_file(file_info):
    """T√©l√©charge un fichier depuis l'ESP32 dans le dossier data/json_data_files/"""
    # Si file_info est un dictionnaire, extraire le nom du fichier.
    if isinstance(file_info, dict):
        file_name = file_info.get("file", "")
    else:
        file_name = file_info

    # V√©rifier que file_name est bien une cha√Æne non vide
    if not isinstance(file_name, str) or not file_name.strip():
        print("‚ùå Nom de fichier invalide :", file_name)
        return

    # D√©finir le chemin local du fichier √† t√©l√©charger
    local_path = os.path.join(LOCAL_SAVE_FOLDER, file_name)

    # V√©rifier si le fichier existe d√©j√†
    if os.path.exists(local_path):
        print(f"‚ÑπÔ∏è Le fichier {file_name} existe d√©j√† dans {LOCAL_SAVE_FOLDER}. T√©l√©chargement ignor√©.")
        return

    file_url = f"{DOWNLOAD_URL}?file={file_name}"
    print(f"üîÑ T√©l√©chargement du fichier depuis : {file_url}")
    try:
        response = requests.get(file_url, timeout=10)
        print(f"R√©ponse du serveur pour le t√©l√©chargement ({file_name}) : {response.status_code}")
        if response.status_code == 200:
            with open(local_path, "wb") as file:
                file.write(response.content)
            print(f"‚úÖ T√©l√©charg√© : {file_name} ‚Üí {local_path}")
        else:
            print(f"‚ùå Impossible de t√©l√©charger {file_name}. Code HTTP : {response.status_code}")
            print("Contenu de la r√©ponse :", response.text)
    except requests.exceptions.RequestException as e:
        print(f"üö® Erreur lors du t√©l√©chargement de {file_name} : {e}")


def call_data_from_esp():
    print("üîÑ R√©cup√©ration de la liste des fichiers...")
    print("COUCOU____1")

    file_list = get_file_list()
    print("COUCOU___2")

    if not file_list:
        print("‚ùå Aucun fichier trouv√© sur l'ESP32.")
        return
    print("COUCOU___3")

    print(f"üìÇ {len(file_list)} fichiers trouv√©s : {file_list}")
    print("COUCOU___4")
    # T√©l√©chargement de chaque fichier vers data/json_data_files/
    for file_name in file_list:
        download_file(file_name)

    print("üéâ Tous les fichiers ont √©t√© r√©cup√©r√©s avec succ√®s dans :", LOCAL_SAVE_FOLDER)


if __name__ == "__main__":
    call_data_from_esp()
